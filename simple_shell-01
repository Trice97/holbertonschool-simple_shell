#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>

/* Déclaration de la variable externe environ */
extern char **environ;

/**
 * main - Entry point for the simple shell.
 * @argc: Argument count
 * @argv: Argument vector
 *
 * Return: Always 0.
 */
int main(int argc, char **argv)
{
    char *line = NULL;
    size_t len = 0;
    ssize_t read;
    char *cmd_argv[2];
    int status;
    pid_t pid;
    char *prog_name;

    /* Récupération du nom du programme pour les messages d'erreur */
    prog_name = argv[0];

    while (1)
    {
        if (isatty(STDIN_FILENO))
        {
            write(STDOUT_FILENO, "#cisfun$ ", 9);
            fflush(stdout);
        }
        read = getline(&line, &len, stdin);
        if (read == -1)
        {
            if (isatty(STDIN_FILENO))
                write(STDOUT_FILENO, "\n", 1);
            break;
        }

        /* Remove trailing newline */
        if (read > 0 && line[read - 1] == '\n')
            line[read - 1] = '\0';

        /* Skip empty lines */
        if (strlen(line) == 0)
            continue;

        if (strcmp(line, "exit") == 0)
        {
            free(line);
            exit(EXIT_SUCCESS);
        }

        cmd_argv[0] = line;
        cmd_argv[1] = NULL;

        pid = fork();
        if (pid == -1)
        {
            perror("Error");
            continue;
        }
        else if (pid == 0)
        {
            /* Child process */
            if (execve(cmd_argv[0], cmd_argv, environ) == -1)
            {
                /* Format exact du message d'erreur */
                dprintf(STDERR_FILENO, "%s: 1: %s: not found\n", prog_name, line);
                exit(127);
            }
        }
        else
        {
            /* Parent process */
            waitpid(pid, &status, 0);
        }
    }

    free(line);
    return (0);
}
